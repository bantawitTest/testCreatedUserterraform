# 1. Check if the Permissions Boundary Policy already exists
data "aws_iam_policy" "existing_permissions_boundary_policy" {
  name = "${var.user_name}_CustomIPWhitelist"
}

# 2. Create the Permissions Boundary Policy if it doesn't exist
resource "aws_iam_policy" "permissions_boundary_policy" {
  count       = length(try(data.aws_iam_policy.existing_permissions_boundary_policy.id, [])) == 0 ? 1 : 0
  name        = "${var.user_name}_CustomIPWhitelist"
  description = "Permissions Boundary for IP Whitelist"
  policy      = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = "*"
        Resource = "*"
        Condition = {
          "ForAnyValue:IpAddress" = {
            "aws:SourceIp" = var.ip_addresses
          }
        }
      }
    ]
  })
}


# 3. Check if the IAM User already exists
data "aws_iam_user" "existing_user" {
  user_name = var.user_name
}

# 4. Create the IAM User if it doesn't exist
resource "aws_iam_user" "new_user" {
  count                = length(data.aws_iam_user.existing_user.id) == 0 ? 1 : 0
  name                 = var.user_name
  permissions_boundary = try(data.aws_iam_policy.existing_permissions_boundary_policy[0].arn, aws_iam_policy.permissions_boundary_policy[0].arn)
}

# 5. Create Inline Policy for the User if the User is newly created
resource "aws_iam_user_policy" "user_policy" {
  count   = length(data.aws_iam_user.existing_user.id) == 0 ? 1 : 0
  user    = aws_iam_user.new_user[0].name
  name    = "${var.user_name}_policy"
  policy  = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = "sts:AssumeRole"
        Effect   = "Allow"
        Resource = "arn:aws:iam::${var.account_id}:role/${var.role_name}"
      }
    ]
  })
}

# 6. Create Access Keys for the User if the User is newly created
resource "aws_iam_access_key" "user_access_key" {
  count = length(data.aws_iam_user.existing_user.id) == 0 ? 1 : 0
  user  = aws_iam_user.new_user[0].name
}
