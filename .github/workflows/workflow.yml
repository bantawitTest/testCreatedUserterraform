name: Terraform Plan and Apply

on:
  workflow_dispatch:  # Permite ejecución manual

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      # Step 3: Set up AWS OIDC credentials
      - name: Set up AWS OIDC credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::918691367691:role/GithubActionWorkflowOICD
          aws-region: us-east-1
          role-session-name: GitHubActions

      # Step 4: Terraform Init
      - name: Terraform Init
        run: terraform init

      # Step 5: Terraform Apply and Capture Output
      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve
          echo "::notice title=Terraform Apply Completed::Successfully applied Terraform changes"

          # Capturar las salidas de Terraform
          USER_NAME=$(terraform output -raw user_name 2>/dev/null || echo "ERROR")
          ACCESS_KEY_ID=$(terraform output -raw access_key_id 2>/dev/null || echo "ERROR")
          ACCESS_KEY_SECRET=$(terraform output -raw access_key_secret 2>/dev/null || echo "ERROR")

          # Validar las variables y evitar errores al escribir en $GITHUB_ENV
          if [[ $USER_NAME == "ERROR" || $ACCESS_KEY_ID == "ERROR" || $ACCESS_KEY_SECRET == "ERROR" ]]; then
            echo "Error: Unable to fetch Terraform outputs. Please check the output values."
            exit 1
          fi

          # Escribir valores en $GITHUB_ENV usando formato seguro
          echo "USER_NAME<<EOF" >> $GITHUB_ENV
          echo "$USER_NAME" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "ACCESS_KEY_ID<<EOF" >> $GITHUB_ENV
          echo "$ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "ACCESS_KEY_SECRET<<EOF" >> $GITHUB_ENV
          echo "$ACCESS_KEY_SECRET" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Step 6: Validar que las variables están disponibles
      - name: Validar Variables de Entorno
        run: |
          echo "USER_NAME: ${{ env.USER_NAME }}"
          echo "ACCESS_KEY_ID: ${{ env.ACCESS_KEY_ID }}"
          echo "ACCESS_KEY_SECRET: <sensitive>"

      # Step 7: Generar un archivo de credenciales
      - name: Generar Archivo de Credenciales
        run: |
          echo "Access Key ID: ${{ env.ACCESS_KEY_ID }}" > "${{ env.USER_NAME }}_credentials.txt"
          echo "Secret Access Key: ${{ env.ACCESS_KEY_SECRET }}" >> "${{ env.USER_NAME }}_credentials.txt"
          echo "User Name: ${{ env.USER_NAME }}" >> "${{ env.USER_NAME }}_credentials.txt"

      # Step 8: Subir las credenciales generadas como un artefacto
      - name: Subir Credenciales
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.USER_NAME }}-credentials
          path: "${{ env.USER_NAME }}_credentials.txt"
          retention-days: 1
