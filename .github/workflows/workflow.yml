name: Terraform Plan and Apply

on:
  pull_request:
    paths:
      - terraform.tfvars  # Ejecutar solo si hay cambios en terraform.tfvars
    branches:
      - main  # Solo para pull requests dirigidos a la rama main

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Check if terraform.tfvars has changed
      - name: Check if terraform.tfvars has changed
        id: check_tfvars
        run: |
          git fetch origin main
          if ! git diff --quiet origin/main -- terraform.tfvars; then
            echo "terraform.tfvars has changed, proceeding with the workflow"
          else
            echo "No changes detected in terraform.tfvars, skipping workflow."
            exit 0  # Skip the workflow if no changes in terraform.tfvars
          fi

      # Step 3: Install Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'  # Change to the version of Terraform you need

      # Step 4: Set up AWS OIDC credentials (Assuming AWS OIDC is configured with GitHub)
      - name: Set up AWS OIDC credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::918691367691:role/GithubActionWorkflowOICD
          aws-region: us-east-1
          role-session-name: GitHubActions

      # Step 5: Terraform Init
      - name: Terraform Init
        run: terraform init

      # Step 6: Terraform Apply
      - name: Terraform Apply and Save Account Name to Environment Variable
        id: apply
        run: |
          set -x  # Enable shell debugging
          terraform apply -auto-approve
      
          # Log Terraform outputs for debugging
          terraform output -json > tf_output.json
          cat tf_output.json  # Log all outputs for inspection
      
          # Extract specific values from the JSON file using jq
          USER_NAME=$(jq -r '.user_name.value' tf_output.json)
          ACCESS_KEY_ID=$(jq -r '.access_key_id.value' tf_output.json)
          ACCESS_KEY_SECRET=$(jq -r '.access_key_secret.value' tf_output.json)
      
          # Create the file and write the information to it
          echo "buenos," > user_info.txt
          echo "" >> user_info.txt
          echo "aqui te dejo las info de el user creado:" >> user_info.txt
          echo "access_key_id: ${ACCESS_KEY_ID}" >> user_info.txt
          echo "access_key_secret: ${ACCESS_KEY_SECRET}" >> user_info.txt
          echo "user_name: ${USER_NAME}" >> user_info.txt
          echo "" >> user_info.txt
          echo "Gracias" >> user_info.txt
      
          # Show the content of the file
          echo "Content of user_info.txt:"
          cat user_info.txt



      # Step 7: Upload the file as an artifact
      - name: Upload User Info as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: user-info
          path: user_info.txt
          retention-days: 1

      # Step 8: Use Saved Environment Variables (Optional Example)
      - name: Use Saved Environment Variables
        run: |
          echo "User Name: ${{ env.USER_NAME }}"
          echo "Access Key ID: ${{ env.ACCESS_KEY_ID }}"
          # Avoid echoing sensitive data like ACCESS_KEY_SECRET
